# Generated by Django 4.2.4 on 2023-10-02 21:14

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('api', models.CharField(max_length=255, null=True)),
                ('phone', models.CharField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('companyID', models.IntegerField(primary_key=True, serialize=False)),
                ('companyName', models.CharField(max_length=100)),
                ('subscriptionDate', models.DateField(blank=True, null=True)),
                ('lastlogin_date', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('meeting_id', models.IntegerField(primary_key=True, serialize=False)),
                ('person_name', models.CharField(blank=True, max_length=50, null=True)),
                ('meeting_date', models.DateField(blank=True, null=True)),
                ('companyID', models.ForeignKey(db_column='companyID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.company')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_tc', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('person_name', models.CharField(blank=True, max_length=50, null=True)),
                ('person_lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('university', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpeakingDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('speaker', models.CharField(blank=True, max_length=255, null=True)),
                ('meeting_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.meeting')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_date', models.DateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=6, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('emotion', models.CharField(blank=True, max_length=10, null=True)),
                ('precisions', models.FloatField(blank=True, null=True)),
                ('meeting_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.meeting')),
            ],
        ),
        migrations.AddField(
            model_name='meeting',
            name='person_tc',
            field=models.ForeignKey(db_column='person_tc', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.person'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='userid',
            field=models.ForeignKey(db_column='userid', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='companyID',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.company'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
